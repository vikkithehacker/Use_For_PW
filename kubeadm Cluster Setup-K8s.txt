1) git clone https://github.com/techiescamp/kubeadm-scripts

2) cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

3) sudo modprobe overlay
4) sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system



sudo apt-get update

sudo apt-get install -y apt-transport-https ca-certificates curl

sudo swapoff -a (optional)

sudo curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
ls

sudo nano /etc/apt/sources.list.d/kubernetes.list
open file and paste --

deb https://apt.kubernetes.io/ kubernetes-xenial main EOF

save the file 

sudo apt-get update 
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


ls ---(kubeadm-scripts)
cd kubeadm-scripts
ls
cd scripts
./common.sh

till now we have to do every command in all nodes


now we have to work on maser node 


cd scripts
ls 


now we have to change in master.sh  

#PUBLIC_IP_ACCESS=true (false)
./master.sh 

mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config


then you have to copy some conetent for join to another node ---

" Your Kubernetes control-plane has initialized successfully!
To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl get nodes---it will show 1 nodes 
kubectl get podes 

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of control-plane nodes by copying certificate authorities
and service account keys on each node and then running the following as root:

  kubeadm join 3.110.29.189:6443 --token ph5kj1.6adzkucjly75piua \
        --discovery-token-ca-cert-hash sha256:144b2f2024c684c6695d356f9254a90eea494d3e65a001e99ccce5ca309d4c6f \
        --control-plane

Then you can join any number of worker nodes by running the following on each as root."




after then you have to go to worker node and give some command for join to master 

sudo kubeadm join 3.110.29.189:6443 --token ph5kj1.6adzkucjly75piua \
        --discovery-token-ca-cert-hash sha256:144b2f2024c684c6695d356f9254a90eea494d3e65a001e99ccce5ca309d4c6f


aftre done these all steps - cluser will crate succesfully 
now we can check --

kubectl get nodes---it will show 2 nodes 
kubectl get podes 





If you can deploy then follow some steps 

Write a yaml file> for ngnix Deploymnet  

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        resources:
          limits:
            cpu: "0.5"
            memory: "256Mi"
          requests:
            cpu: "0.25"
            memory: "128Mi"
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 32000

 kubectl apply -f sample-app.yaml
 kubectl get pods
   
then take worker node public ip

and paste it broser with port.